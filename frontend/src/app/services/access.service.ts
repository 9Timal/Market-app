import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Store } from '../models/store.model'; // Remplace par ton vrai mod√®le si besoin
import { environment } from '../../environments/environment';


@Injectable({
  providedIn: 'root'
})
export class AccessService {

  /**
   * üîÅ selectedStoreSubject stocke le magasin actuellement s√©lectionn√©.
   * On commence avec "null", donc pas de magasin s√©lectionn√© par d√©faut.
   */
  private selectedStoreSubject = new BehaviorSubject<Store | null>(null);
  selectedStore$ = this.selectedStoreSubject.asObservable(); // observable pour les composants
  
  
  /**
   * üîê localRoleSubject stocke le r√¥le de l'utilisateur DANS le magasin s√©lectionn√©.
   * Exemple : 'admin', 'chef_admin', ou null s‚Äôil n‚Äôa aucun droit local.
   */
  private localRoleSubject = new BehaviorSubject<'admin' | 'chef_admin' | null>(null);
  localRole$ = this.localRoleSubject.asObservable();

  constructor(private http: HttpClient) {
    this.initSelectedStore();
  }

  /**
   * üìç Appel√© quand l'utilisateur s√©lectionne un magasin dans l'app
   * Il met √† jour le magasin s√©lectionn√© + v√©rifie les droits associ√©s via le backend
   */
  setSelectedStore(store: Store): void {
    this.selectedStoreSubject.next(store); // maj du magasin choisi
    const localUser = JSON.parse(localStorage.getItem('user')!);
  
    // Appel backend pour savoir quel est le r√¥le de cet utilisateur dans ce magasin
    this.http
      .get<{ access: 'admin' | 'chef_admin' | null }>(
        `${environment.apiUrl}/api/store_access/access/${store._id}/${localUser._id}`
      )
      .subscribe({
        next: (res) => {
          this.localRoleSubject.next(res.access)// maj du r√¥le 
        }, 
        error: () => {
          this.localRoleSubject.next(null)
        } // en cas d'erreur, aucun droit
      });
  }

  getCurrentRole(): 'admin' | 'chef_admin' | null {
    return this.localRoleSubject.getValue();
  }
  
  /**
   * ‚ùå M√©thode √† appeler √† la d√©connexion ou changement global (r√©initialisation)
   */
  reset(): void {
    this.selectedStoreSubject.next(null);
    this.localRoleSubject.next(null);
  }

  /**
   * Initialise le store s√©lectionn√© depuis localStorage
   * et √©coute les changements pour garder localStorage synchronis√©.
   */

  private initSelectedStore(): void {
    // Rechargement √† l'ouverture
    const stored = localStorage.getItem('selected_store');
    if (stored) {
      try {
        const store: Store = JSON.parse(stored);
        this.selectedStoreSubject.next(store);
      } catch {
        localStorage.removeItem('selected_store');
      }
    }

    // Synchro automatique vers localStorage √† chaque changement
    this.selectedStore$.subscribe(store => {
      if (store) {
        localStorage.setItem('selected_store', JSON.stringify(store));
      } else {
        localStorage.removeItem('selected_store');
      }
    });
  }
}

