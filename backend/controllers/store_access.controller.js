const StoreAccess = require('../models/storeAccess.model');

// üîç GET : R√©cup√©rer tous les acc√®s d‚Äôun utilisateur
const getAccessForUser = async (req, res) => {
  try {
    const userId = req.params.userId;

    const accesses = await StoreAccess.find({ user: userId })
      .populate('store')  // ceci ajoute toutes les infos du magasin
      // .populate('user', 'name lastname email'); // facultatif si tu veux info user

    res.status(200).json(accesses);
  } catch (err) {
    console.error("Erreur r√©cup√©ration acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// ‚ûï POST : Ajouter un acc√®s pour un utilisateur √† un magasin
const createAccess = async (req, res) => {
  try {
    const { user, store, role_in_store } = req.body;

    // V√©rifie si l'acc√®s existe d√©j√†
    const existingAccess = await StoreAccess.findOne({ user, store});
    if (existingAccess) {
      return res.status(400).json({ message: "Acc√®s d√©j√† existant pour ce magasin." });
    }

    const newAccess = new StoreAccess({ user, store, role_in_store });
    await newAccess.save();
    console.log("‚úÖ Ajout r√©ussi :", newAccess);
    res.status(201).json({ message: "Acc√®s ajout√©.", access: newAccess });

  } catch (err) {
    console.error("Erreur ajout acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// ‚úèÔ∏è PUT : Modifier un acc√®s existant (changer le r√¥le local)
const updateAccess = async (req, res) => {
  try {
    const accessId = req.params.id;
    const { role_in_store } = req.body;

    const updated = await StoreAccess.findByIdAndUpdate(
      accessId,
      { role_in_store },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ message: "Acc√®s non trouv√©." });
    }

    res.status(200).json({ message: "Acc√®s mis √† jour.", access: updated });
  } catch (err) {
    console.error("Erreur modification acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// ‚ùå DELETE : Supprimer un acc√®s √† un magasin
const deleteAccess = async (req, res) => {
  try {
    const accessId = req.params.id;
    const deleted = await StoreAccess.findByIdAndDelete(accessId);

    if (!deleted) {
      return res.status(404).json({ message: "Acc√®s non trouv√©." });
    }

    res.status(200).json({ message: "Acc√®s supprim√©.", access: deleted });
  } catch (err) {
    console.error("Erreur suppression acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// GET /api/access/store/:storeId ‚Üí Liste des acc√®s d‚Äôun magasin
const getAccessByStore = async (req, res) => {
  const { storeId } = req.params;

  try {
    const accesses = await StoreAccess.find({ store_id: storeId })
      .populate('user_id', 'name email role') // pour inclure les infos de l‚Äôutilisateur
      .populate('store_id', 'name'); // optionnel, si tu veux afficher aussi le nom du magasin

    res.status(200).json(accesses);
  } catch (err) {
    console.error("Erreur r√©cup√©ration acc√®s par store :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};


module.exports = {
  getAccessForUser,
  createAccess,
  updateAccess,
  deleteAccess,
  getAccessByStore,
};
