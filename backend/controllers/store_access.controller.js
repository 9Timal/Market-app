const StoreAccess = require('../models/storeAccess.model');
const User = require('../models/user.model');

// üîç GET : R√©cup√©rer tous les acc√®s d‚Äôun utilisateur
const getAccessForUser = async (req, res) => {
  try {
    const userId = req.params.userId;

    const accesses = await StoreAccess.find({ user: userId })
      .populate('store')  // ceci ajoute toutes les infos du magasin
      // .populate('user', 'name lastname email'); // facultatif si tu veux info user

    res.status(200).json(accesses);
  } catch (err) {
    console.error("Erreur r√©cup√©ration acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// ‚ûï POST : Ajouter un acc√®s pour un utilisateur √† un magasin
const createAccess = async (req, res) => {
  try {
    const { user, store, role_in_store } = req.body;

    // V√©rifie si l'acc√®s existe d√©j√†
    const existingAccess = await StoreAccess.findOne({ user, store});
    if (existingAccess) {
      return res.status(400).json({ message: "Acc√®s d√©j√† existant pour ce magasin." });
    }

    const newAccess = new StoreAccess({ user, store, role_in_store });
    await newAccess.save();
    console.log("‚úÖ Ajout r√©ussi :", newAccess);
    res.status(201).json({ message: "Acc√®s ajout√©.", access: newAccess });

  } catch (err) {
    console.error("Erreur ajout acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// ‚úèÔ∏è PUT : Modifier un acc√®s existant (changer le r√¥le local)
const updateAccess = async (req, res) => {
  try {
    const accessId = req.params.id;
    const { role_in_store } = req.body;

    const updated = await StoreAccess.findByIdAndUpdate(
      accessId,
      { role_in_store },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ message: "Acc√®s non trouv√©." });
    }

    res.status(200).json({ message: "Acc√®s mis √† jour.", access: updated });
  } catch (err) {
    console.error("Erreur modification acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// ‚ùå DELETE : Supprimer un acc√®s √† un magasin
const deleteAccess = async (req, res) => {
  try {
    const accessId = req.params.id;
    const deleted = await StoreAccess.findByIdAndDelete(accessId);

    if (!deleted) {
      return res.status(404).json({ message: "Acc√®s non trouv√©." });
    }

    res.status(200).json({ message: "Acc√®s supprim√©.", access: deleted });
  } catch (err) {
    console.error("Erreur suppression acc√®s :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// GET /api/access/store/:storeId ‚Üí Liste des acc√®s d‚Äôun magasin
const getAccessForUserInStore = async (req, res) => {
  const { storeId, userId } = req.params;

  try {
    // On r√©cup√®re d'abord l'utilisateur
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©." });
    }

    // Puis on cherche l'acc√®s √† ce magasin
    const access = await StoreAccess.findOne({ user: userId, store: storeId });
    if (!access) {
      return res.status(404).json({ message: "Aucun acc√®s trouv√© pour cet utilisateur dans ce magasin." });
    }

    // Tout est bon, on r√©pond avec les infos utiles
    res.status(200).json({
      message: "Acc√®s trouv√©.",
      user: {
        _id: user._id,
        name: user.name,
        lastname: user.lastname,
        email: user.email,
        role: user.role
      },
      access: access.role_in_store
    });

  } catch (err) {
    console.error("Erreur r√©cup√©ration acc√®s par store :", err.message);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

const checkAccess = async (req, res) => {
  const storeId = req.params.storeId;
  const userId = req.user._id;
  const role = req.user.role;

  if (role === 'super_admin') {
    return res.status(200).json({ access: true });
  }

  const access = await StoreAccess.findOne({ user: userId, store: storeId });
  if (access) {
    return res.status(200).json({ access: true });
  }

  return res.status(403).json({ access: false });
};

const getAccessByStore = async (req, res) => {
  const { storeId } = req.params;

  try {
    const accesses = await StoreAccess.find({ store: storeId });

    const users = await Promise.all(accesses.map(async (access) => {
      const user = await User.findById(access.user).select('-password');
      return {
        _id: access._id,
        user: access.user,
        role: access.role_in_store,
        user, // contient name, lastname, email, etc.
      };
    }));

    res.status(200).json(users);
  } catch (err) {
    console.error('Erreur lors de la r√©cup√©ration des acc√®s :', err);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};



module.exports = {
  getAccessForUser,
  createAccess,
  updateAccess,
  deleteAccess,
  getAccessForUserInStore,
  checkAccess,
  getAccessByStore
};
