const express = require('express');
const router = express.Router();

const {
  createInvitation,
  getAllInvitationsByStore,
  getInvitationByEmailOrStore,
  deleteInvitation,
  updateInvitationStatus,
  getMyInvitations,
  acceptInvitation,
  refuseInvitation
} = require('../controllers/storeInvite.controller');

const verifyToken = require('../middlewares/auth.middleware'); // v√©rifie le JWT
const authorizeStoreInviteAccess = require('../middlewares/authorizeStoreInviteAccess'); // v√©rifie r√¥le chef_admin ou super_admin
const authorizeRole = require('../middlewares/authorizeRole');

// üîç Recherche d‚Äôinvitations (par email et/ou magasin)
router.get('/search', verifyToken,authorizeStoreInviteAccess, getInvitationByEmailOrStore);

// üë§ R√©cup√©rer toutes les invitations de l'utilisateur connect√©
router.get('/me', verifyToken, getMyInvitations);

// üì¶ R√©cup√©rer toutes les invitations d‚Äôun magasin
router.get('/store/:store_id', verifyToken,authorizeStoreInviteAccess, getAllInvitationsByStore);

// ‚ûï Cr√©er une invitation (super_admin ou chef_admin du magasin)
router.post('/', verifyToken, authorizeStoreInviteAccess, createInvitation);

// üîÅ Modifier le statut d‚Äôune invitation (refus√©e / utilis√©e, etc.)
router.put('/:id/status', verifyToken,authorizeRole('super_admin'), updateInvitationStatus);

// ‚ùå Supprimer une invitation
router.delete('/:id', verifyToken,authorizeRole('super_admin'), deleteInvitation);

// ‚úÖ Accepter une invitation (user connect√©)
router.post('/:id/accept', verifyToken, acceptInvitation);

// ‚ùå Refuser une invitation (user connect√©)
router.post('/:id/refuse', verifyToken, refuseInvitation);

module.exports = router;
